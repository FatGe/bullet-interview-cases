[{"type":"element","tagName":"h1","attributes":[],"children":[{"type":"text","content":"如何确保 methods 在 React 组件类中具有正确的 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"this"}]},{"type":"text","content":" 上下文"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Answer"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"在JavaScript类中，默认情况下是不对方法进行绑定的。\n这意味着它们的 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"this"}]},{"type":"text","content":" 上下文可以更改（在事件处理程序的情况下，更改为正在侦听事件的元素），并且不会引用组件实例。\n为了解决这个问题，可以使用 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"Function.prototype.bind"}]},{"type":"text","content":" 来强制执行 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"this"}]},{"type":"text","content":" 上下文作为组件实例"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"constructor(props) {\n  super(props);\n  this.handleClick = this.handleClick.bind(this);\n}\n\nhandleClick() {\n  // Perform some logic\n}\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"bind"}]},{"type":"text","content":"方法可能很冗长，同时还需要定义一个 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"constructor"}]},{"type":"text","content":"，所以通常首选新的公共类字段语法。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"handleClick = () =&gt; {\n  console.log('this is:', this);\n}\n\nrender() {\n  return (\n    &lt;button onClick={this.handleClick}&gt;\n      Click me\n    &lt;/button&gt;\n  );\n}\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"您还可以使用内联箭头函数，使得"},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"this"}]},{"type":"text","content":"（指代组件实例）被保留："}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"&lt;button onClick={e =&gt; this.handleClick(e)}&gt;Click me&lt;/button&gt;\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"请注意，使用此技术会引起额外的重新渲染，因为在渲染时会创建新的函数引用, 如果将它传递给子组件会使得 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"shouldComponentUpdate"}]},{"type":"text","content":" / "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"PureComponent"}]},{"type":"text","content":" 浅层相等检测来防止不必要的渲染这个能力失效。在性能很重要的情况下，最好在构造函数中使用 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"bind"}]},{"type":"text","content":"，或者使用公共类字段语法方法，因为函数引用保持不变。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Good to hear"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"您可以将方法绑定到构造函数中的组件实例上下文，使用公共类字段语法或使用内联箭头函数。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Additional links"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://reactjs.org/docs/handling-events.html"}],"children":[{"type":"text","content":"React docs on Handling Events"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://reactjs.org/docs/faq-functions.html#how-do-i-bind-a-function-to-a-component-instance"}],"children":[{"type":"text","content":"React docs on Passing Functions to Components"}]}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- tags: (react,javascript) --&gt;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- expertise: (2) --&gt;"}]},{"type":"text","content":"\n"}]