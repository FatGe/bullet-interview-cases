[{"type":"element","tagName":"h1","attributes":[],"children":[{"type":"text","content":"NodeJS经常使用回调模式，如果在执行期间遇到错误，此错误作为回调的第一个参数传递。这种模式的优点是什么"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"fs.readFile(filePath, function(err, data) {\n  if (err) {\n    // handle the error, the return is important here\n    // so execution stops here\n    return console.log(err)\n  }\n  // use the data object\n  console.log(data)\n})\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Answer"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"优势在于:"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"如果不需要引用数据，则无需处理数据;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"拥有一致的API可以带来更多的复用;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"能够轻松调整回调模式，从而实现更易维护的代码。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"从下面的示例中可以看出，如果没有错误，则调用回调，并将null作为其第一个参数。但是，如果出现错误，则创建一个Error对象，然后该对象将成为回调唯一的参数。这种回调函数模式可以使用户容易地知道是否发生了错误。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"这种做法也称 "},{"type":"element","tagName":"em","attributes":[],"children":[{"type":"text","content":"Node.js error convention"}]},{"type":"text","content":"，这种回调实现称为 "},{"type":"element","tagName":"em","attributes":[],"children":[{"type":"text","content":"error-first callbacks"}]},{"type":"text","content":"。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"var isTrue = function(value, callback) {\n  if (value === true) {\n    callback(null, &quot;Value was true.&quot;)\n  } else {\n    callback(new Error(&quot;Value is not true!&quot;))\n  }\n}\n\nvar callback = function(error, retval) {\n  if (error) {\n    console.log(error)\n    return\n  }\n  console.log(retval)\n}\n\nisTrue(false, callback)\nisTrue(true, callback)\n\n/*\n  { stack: [Getter/Setter],\n    arguments: undefined,\n    type: undefined,\n    message: 'Value is not true!' }\n  Value was true.\n*/\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Good to hear"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Additional links"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/"}],"children":[{"type":"text","content":"The Node.js Way - Understanding Error-First Callbacks"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions"}],"children":[{"type":"text","content":"What are the error conventions?"}]}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- tags: (node,javascript) --&gt;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- expertise: (1) --&gt;"}]},{"type":"text","content":"\n"}]