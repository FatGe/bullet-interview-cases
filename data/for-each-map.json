[{"type":"element","tagName":"h1","attributes":[],"children":[{"type":"text","content":"Array 的 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"map()"}]},{"type":"text","content":" 和 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"forEach()"}]},{"type":"text","content":" 之间有什么不同"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Answer"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"两种方法都遍历数组的元素。 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"map"}]},{"type":"text","content":" 通过调用每个元素上的回调函数并返回一个新数组，将每个元素映射到一个新元素。另一方面，"},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"forEach"}]},{"type":"text","content":" 为每个元素调用回调函数，但不返回新数组。"},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"forEach"}]},{"type":"text","content":" 通常在每次迭代时产生副作用时使用，而 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"map"}]},{"type":"text","content":" 是一种常见的函数编程技术。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Good to hear"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"如果需要迭代数组并修改元素而不需要返回值来生成新数组，请使用"},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"forEach（）"}]},{"type":"text","content":";"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"map"}]},{"type":"text","content":" 是保持数据不可变的正确选择，其中原始数组的每个值都映射到一个新数组。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Additional links"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"}],"children":[{"type":"text","content":"MDN docs for forEach"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"}],"children":[{"type":"text","content":"MDN docs for map"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://codeburst.io/javascript-map-vs-foreach-f38111822c0f"}],"children":[{"type":"text","content":"JavaScript — Map vs. ForEach"}]}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- tags: (javascript) --&gt;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- expertise: (1) --&gt;"}]},{"type":"text","content":"\n"}]