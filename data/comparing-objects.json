[{"type":"element","tagName":"h1","attributes":[],"children":[{"type":"text","content":"在 JavaScript 中如何判断两个对象相等"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Answer"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"尽管两个不同的对象使用相同的值具有相同的属性，但使用 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"=="}]},{"type":"text","content":" 或 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"==="}]},{"type":"text","content":" 进行比较时，可能会得不到你期望的结果。\n这是因为比较操作是通过它们的引用（内存中的位置）进行比较，而不是比较的原始值。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"为了测试两个对象在结构上是否相等，需要一个辅助函数。它会迭代每个对象的属性以测试它们是否具有相同的值，包括嵌套对象。\n可选地，也可以通过传递 "},{"type":"element","tagName":"code","attributes":[],"children":[{"type":"text","content":"true"}]},{"type":"text","content":" 作为第三个参数来测试对象的原型的等效性。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-es6"}],"children":[{"type":"text","content":"function isDeepEqual(obj1, obj2, testPrototypes = false) {\n  if (obj1 === obj2) {\n    return true\n  }\n\n  if (typeof obj1 === &quot;function&quot; &amp;&amp; typeof obj2 === &quot;function&quot;) {\n    return obj1.toString() === obj2.toString()\n  }\n\n  if (obj1 instanceof Date &amp;&amp; obj2 instanceof Date) {\n    return obj1.getTime() === obj2.getTime()\n  }\n\n  if (\n    Object.prototype.toString.call(obj1) !==\n      Object.prototype.toString.call(obj2) ||\n    typeof obj1 !== &quot;object&quot;\n  ) {\n    return false\n  }\n\n  const prototypesAreEqual = testPrototypes\n    ? isDeepEqual(\n        Object.getPrototypeOf(obj1),\n        Object.getPrototypeOf(obj2),\n        true\n      )\n    : true\n\n  const obj1Props = Object.getOwnPropertyNames(obj1)\n  const obj2Props = Object.getOwnPropertyNames(obj2)\n\n  return (\n    obj1Props.length === obj2Props.length &amp;&amp;\n    prototypesAreEqual &amp;&amp;\n    obj1Props.every(prop =&gt; isDeepEqual(obj1[prop], obj2[prop]))\n  )\n}\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Good to hear"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"字符串和数字等原语按其值进行比较;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"对象通过它们的引用（内存中的位置）进行比较。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Additional links"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- tags: (javascript) --&gt;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- expertise: (1) --&gt;"}]},{"type":"text","content":"\n"}]