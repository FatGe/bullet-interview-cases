[{"type":"element","tagName":"h1","attributes":[],"children":[{"type":"text","content":"CSS BEM 是什么"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Answer"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"element","tagName":"strong","attributes":[],"children":[{"type":"text","content":"BEM"}]},{"type":"text","content":"方法是CSS类的命名一种约定，通过定义命名空间来解决样式生效的作用域问题，从而使CSS更易于维护。"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"B代表一个独立的组件，可以跨项目重用，并充当子组件（元素）的“命名空间”;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"E代表一个元素，当前元素的命名，块中的子元素是块的子元素;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"M代表修饰符，它是对其结构的解释，当块或元素处于某种状态或结构或样式不同时，修饰符用作标记。"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"pre","attributes":[],"children":[{"type":"element","tagName":"code","attributes":[{"key":"class","value":"language-css"}],"children":[{"type":"text","content":"/* block component */\n.block {\n}\n\n/* element */\n.block__element {\n}\n\n/* modifier */\n.block__element--modifier {\n}\n"}]}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Good to hear"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"text","content":"CSS-in-JS等范围问题的替代解决方案"}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"h2","attributes":[],"children":[{"type":"text","content":"Additional links"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"ul","attributes":[],"children":[{"type":"text","content":"\n"},{"type":"element","tagName":"li","attributes":[],"children":[{"type":"element","tagName":"a","attributes":[{"key":"href","value":"https://hackernoon.com/writing-clean-and-maintainable-css-using-bem-methodology-1dcbf810a664"}],"children":[{"type":"text","content":"Writing clean and maintainable CSS"}]}]},{"type":"text","content":"\n"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- tags: (css) --&gt;"}]},{"type":"text","content":"\n"},{"type":"element","tagName":"p","attributes":[],"children":[{"type":"text","content":"&lt;!-- expertise: (0) --&gt;"}]},{"type":"text","content":"\n"}]